//since the force sensor have values from 0 to 1023 or so... 
//I'll make it so that there is only three sensors, so the limit will be 0-914, w/10k resistor 
//with the design on the key, the part where in it has the same size of blocks per pin, it will vary the force sensor based on how many blocks are pushing againts the sensor

//each will have 1 force sensor and 10k resistor

/*
Want to happen:
When F1 or F2 or F3 is moved. The doorknob will have a new password to be used. 

The key pins will have 1cm for 100 in F1, 2cm for 200 in F2, ...

How to code it:

***THE CHANGES WILL VARY WHEN WE HAVE THE SENSORS IN HAND***

When F1 is >=100, the passkey will change to F1=100, F2=200, F3=300...
When F2 is >=100, the passkey will change to F1=100, F2=200, F3=300...
When F3 is >=100, the passkey will change to F1=100, F2=200, F3=300...

When F1 is >=200, the passkey will change to F1=100, F2=300, F3=200...
When F2 is >=200, the passkey will change to F1=100, F2=300, F3=200...
When F3 is >=200, the passkey will change to F1=100, F2=300, F3=200...

When F1 is >=300, the passkey will change to F1=200, F2=300, F3=100...
When F2 is >=300, the passkey will change to F1=200, F2=300, F3=100...
When F3 is >=300, the passkey will change to F1=200, F2=300, F3=100...

When F1 is >=400, the passkey will change to F1=300, F2=200, F3=100...
When F2 is >=400, the passkey will change to F1=300, F2=200, F3=100...
When F3 is >=400, the passkey will change to F1=300, F2=200, F3=100...

When F1 is >=500, the passkey will change to F1=400, F2=100, F3=200...
When F2 is >=500, the passkey will change to F1=400, F2=100, F3=200...
When F3 is >=500, the passkey will change to F1=400, F2=100, F3=200...

limited to the max of 500 in force sensor for it may hinder the 3d printed prototype 
*/


/*
I=initializing
G=good
P=problem
*/
#include <nRF24L01.h>
#include <SPI.h>
#include <RF24.h>
#include <Wire.h>
#include <Time.h>
#include <DS1307RTC.h>
#include <SD.h>

//for nRF24L01
RF24 radio(8,7);
byte Address[] [6] = {"1Node","2Node"};

//for SD
File myFile;

#define O 100
#define T 200 
#define Th 300 
#define F 400 
#define Fi 500 

/*
FS 1 for F1 Ff1 A0
FS 2 for F2 Ff2 A1
FS 3 for F3 Ff3 A2 
*/

//Ff123 is the force sensors and are connected to A012
unsigned int F1; unsigned int F2; unsigned int F3;
unsigned int pos1; unsigned int pos2; unsigned int pos3;  //positions of servo

#define Close 1  //pin will vary
#define Open 2  //pin will vary
#define sensing 3  //pin will vary
#define switchon 4  //pin will vary

unsigned char data;  //data packet to be received from the LGT RF nano, must be ==1
int POS[3]={ };  //data array to be sent to the LGT RF nano
int intru;
byte key=0;

void setup() {
  Serial.begin(9600);

  pinMode(Close, OUTPUT);
  pinMode(Open, OUTPUT);
  pinMode(sensing, OUTPUT);
  pinMode(switchon, OUTPUT);  
  digitalWrite(switchon, HIGH);

  radio.begin();
  radio.setPALevel(RF24_PA_MIN);
  radio.setDataRate(RF24_2MBPS);
  radio.setChannel(124);
  radio.openWritingPipe(Address[1])
  radio.openReadingPipe(1, Address[0])
  
  SDmanage();  //initialize, overwriting, header...
}

//SD things   ***MIGHT TAKE OVERWRITE OUTTT***...
void SDmanage() {
    Serial.println("SDmanage I...");
    if(!SD.begin(5)) {
        Serial.println("SDmanage P...");
        while(1);
    }

    else if(SD.begin(5)) {
    Serial.print("SDmanage G...");
    }

    if(SD.exist(rsrch)) {
        SD.remove(rsrch);
        Serial.print("\tfile has been overwritten\t");
    }

    myFile = SD.open(rsrch, FILE_WRITE);
    if(myFile) {
        Serial.print("writing to rsrch: ");
        myFile.println("Time,Day,Pos1,2,3,PI");
        myFile.close();
    }

    else {
        Serial.print("SDmanage-header P...");
    }
}

void loop() {
  tmElements_t tm;

  F1=analogRead(A0);  F2=analogRead(A1);  F3=analogRead(A2); //FS
  
  if((F1>=O) || (F2>=O) || (F3>=O)) {
    digitalWrite(sensing, HIGH);
    Serial.println("Sensing");
  }

  else if((F1<O) || (F2<O) || (F3<O)) {
    digitalWrite(sensing, LOW);
  }
  
  REALTIME();  //includes RTC

  radio.startListening();

  if(radio.available()) {  //opening the door with wallet
    Serial.println("please insert key you have 6 sec");
    delay(6000);  //time to insert key

    while((F1>=O) && (F2>=O) && (F3>=O)) {
      opening();

      if(!radio.available() && (F1<=O) && (F2<=O) && (F3<=O)) {  //if nawala ung wallet and walang key, break
        break;
      }
    }

    else if((F1<=O) && (F2<=O) && (F3<=O)){  //sends POS[3] if FS does not give input and !RA
      DS();
    }
  }

  else if(!radio.available()) {
    while((F1>=O) && (F2>=O) && (F3>=O)){  //while F123 are giving inputs meaning a key
      PIopen();

      if((F1<=O) || (F2<=O) || (F3<=O)) {  //if one FS gets<100 it breaks
        break;
      }
    }

    while((F1>=O) || (F2>=O) || (F3>=O)){  //while F123 are giving inputs independently meaning picklocks
      v12345();

      if((F1<=O) && (F2<=O) && (F3<=O)) {  //if all FS are down, it breaks
        break;
      }
    }
  }

  SDwrite();

  delay(1000);
}


void REALTIME() {
  if (RTC.read(tm)) {
    Serial.println("Time: ");
    print2digits(tm.Hour);
    Serial.write(':');
    print2digits(tm.Minute);
    Serial.write(':');
    print2digits(tm.Second);
    Serial.print(",Date: ");
    Serial.print(tm.Day);
    Serial.write('/');
    Serial.print(tm.Month);
    Serial.println("\n");
  }
  
  else {
    if (!RTC.chipPresent()) {
      Serial.println("REALTIME P...");
    }
  }
}

//Ln 101: If((key1) && (F1==pos1)). what i want to happen is, if key1 is true then the maps on O1 will be the passkey of the doorknob
void opening() {
  //F123 will equal to a value in keys on void.v12345
  //IF key is equal to either 12345 it opens, otherwise by default close
  switch(key) { 
    case 1:
    if((F1>=pos1) && (F2>=pos2) && (F3>=pos3)) {
    digitalWrite(Close, LOW);
    digitalWrite(Open, HIGH);
    }
    break;

    case 2:
    if((F1>=pos1) && (F2>=pos2) && (F3>=pos3)) {
    digitalWrite(Close, LOW);
    digitalWrite(Open, HIGH);
    }
    break;

    case 3:
    if((F1>=pos1) && (F2>=pos2) && (F3>=pos3)) {
    digitalWrite(Close, LOW);
    digitalWrite(Open, HIGH);
    }
    break;

    case 4:
    if((F1>=pos1) && (F2>=pos2) && (F3>=pos3)) {
    digitalWrite(Close, LOW);
    digitalWrite(Open, HIGH);
    }
    break;

    case 5:
    if((F1>=pos1) && (F2>=pos2) && (F3>=pos3)) {
    digitalWrite(Close, LOW);
    digitalWrite(Open, HIGH);
    }
    break:

    default:
    digitalWrite(Close, HIGH);
    digitalWrite(Open, LOW);
    break;
  }
  
}

void PIopen() {
  switch (key) {
    case 1:
    if((F1>=pos1) && (F2>=pos2) && (F3>=pos3)) {
      digitalWrite(Close, LOW);
      digitalWrite(Open, HIGH);
      intru = 1;
    }
    break;

    case 2:
    if((F1>=pos1) && (F2>=pos2) && (F3>=pos3)) {
      digitalWrite(Close, LOW);
      digitalWrite(Open, HIGH);
      intru = 2;
    }
    break;

    case 3:
    if((F1>=pos1) && (F2>=pos2) && (F3>=pos3)) {
      digitalWrite(Close, LOW);
      digitalWrite(Open, HIGH);
      intru = 3;
    }
    break;

    case 4:
    if((F1>=pos1) && (F2>=pos2) && (F3>=pos3)) {
      digitalWrite(Close, LOW);
      digitalWrite(Open, HIGH);
      intru = 4;
    }
    break;

    case 5:
    if((F1>=pos1) && (F2>=pos2) && (F3>=pos3)) {
      digitalWrite(Close, LOW);
      digitalWrite(Open, HIGH);
      intru = 5;
    }
    break;

    default:
      digitalWrite(Close, HIGH);
      digitalWrite(Open, LOW);
    break;
  }
}

void v12345() {
  //any value that will make so that when F123 is x then pos123 will be x, and when pos123=x and F123=x open will be HIGH
  //10,20,30,40 are degrees in servo
  //The probability will increase as the number of if statements in this method increases, current probability is 1/5

  if((F1>=O) || (F2>=O) || (F3>=O)) {
    pos1=10; 
    pos2=20; 
    pos3=30; 

    key=1;
  }
  
  else if((F1>=T) || (F2>=T) || (F3>=T)) {
    pos1=10;
    pos2=30;
    pos3=20;

    key=2;
  }
  
  else if((F1>=Th) || (F2>=Th) || (F3>=Th)) {
    pos1=20;
    pos2=30;
    pos3=10;

    key=3;
  }
  
  else if((F1>=F) || (F2>=F) || (F3>=F)) {
    pos1=30;
    pos2=20;
    pos3=10;

    key=4;
  }
  
  else if((F1>=Fi) || (F2>=Fi) || (F3>=Fi)) {
    pos1=40;
    pos2=10;
    pos3=20;

    key=5;
  }
}

//data sending pos
void DS() {
  while(radio.available()) {
    radio.read(&data, sizeof(char)); 
    delay(1000);  //to wait if ever its slow
    if(data==1) {
      Serial.println("DS G..." )
      break;
    }
  }

  if(data==1) {
    radio.stopListening();
    radio.write(POSRTC, sizeof(POSRTC));
    POSRTC[2]=pos1; 
    POSRTC[3]=pos2;
    POSRTC[4]=pos3;
    Serial.print("sent");
  }

  else{
    Serial.print("wrong data value received... ");
    Serial.print("radio unnavailable... ");
    Serial.print("error in DS... ");
  }
}

void SDwrite() {
    myFile = SD.open(positions, FILE_WRITE);

  if(myFile) {
    myFile.print("Time: ");
    myFile.print(print2digits(tm.Hour));
    myFile.print(':');
    myFile.print(print2digits(tm.Minute));
    myFile.print(':');
    myFile.print(print2digits(tm.Second));
    myFile.print("Day(DMY): ");
    myFile.print(tm.Day);
    myFile.print('/');
    myFile.print(tm.Month);
    
    myFile.print("Positions(1,2,3): ");    
    myFile.print(POS[0]);
    myFile.print(",");
    myFile.print(POS[1]);
    myFile.print(",");
    myFile.print(POS[2]);

    myFile.print(" PI: ");
    myFile.print(intru);

    myFile.close();
  }
  else {
    Serial.println("SDwrite P...");
  }
}

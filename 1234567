#include <nRF24L01.h>
#include <SPI.h>
#include <RF24.h>
#include <Wire.h>
#include <Time.h>
#include <DS1307RTC.h>
#include <SD.h>

//for SD
File myFile;

#define SCS 10
#define SDP 3  
#define NCS 7
#define NRP 2

//for nRF24L01
RF24 radio(8,NCS);
const byte addresses[][6] = {"00001", "00002"};

#define Close 6
#define Open 4
#define sensing 5  
int F1;
int F2;
int F3;

byte dataf=0;
byte intru=0;
byte key=0;

void setup() {
  Serial.begin(9600);

  pinMode(Close, OUTPUT);
  pinMode(Open, OUTPUT);
  pinMode(sensing, OUTPUT);

  pinMode(9, INPUT_PULLUP);

  pinMode(NRP, OUTPUT);
  pinMode(NCS, OUTPUT);
  pinMode(SDP, OUTPUT);
  pinMode(SCS, OUTPUT);
  digitalWrite(NRP, HIGH);
  digitalWrite(NCS, HIGH);
  digitalWrite(SDP, HIGH);
  digitalWrite(SCS, HIGH);
  //HIGH means off both on CS and PNP MOSFET

  NRFinit();

  SDinit();  
}

void NRFinit() {
  nact();
  if(radio.begin()) {
    Serial.println("Radio G...");
    radio.setPALevel(RF24_PA_MIN);
    radio.setDataRate(RF24_250KBPS);
    radio.openWritingPipe(addresses[1]);
    radio.openReadingPipe(1, addresses[0]);
    radio.setChannel(90);
  }

  else if(!radio.begin()) {
    Serial.println("Radio P...");
    while(1);
  }
}

void SDinit() {
  sact();
  if(SD.begin(10)) {
    Serial.println("SD G...");

    if(SD.exists("expe.csv")) {
      SD.remove("expe.csv");
      Serial.println("csv overwritten");
    }

    myFile = SD.open("expe.csv", FILE_WRITE);

    if(myFile) {
      Serial.println("writing ");
      myFile.print("Time(second");
      myFile.print(",");
      myFile.print("Minute");
      myFile.print(",");
      myFile.print(" Date(Day");
      myFile.print(",");
      myFile.print("POS: ");
      myFile.print(",");
      myFile.print("1");
      myFile.print(",");
      myFile.print("2");
      myFile.print(",");
      myFile.print("3");
      myFile.print(",");
      myFile.print("Key");
      myFile.print(",");
      myFile.print("Intru");
      myFile.print(",");

      myFile.close();
    }
    else if(!myFile) {
      Serial.println("Writing P...");
      while(1);
    }
  }

  else if(!SD.begin(10)) {
    Serial.println("SD P...");
    while(1);
  }
}

void loop() {
  dataf=0;

  digitalWrite(Close, LOW);
  digitalWrite(sensing, LOW);
  digitalWrite(Open, LOW);

  F1 = analogRead(A0);
  F2 = analogRead(A1);
  F3 = analogRead(A3);

  Serial.println(F1);
  Serial.println(F2);
  Serial.println(F3);

  Serial.println(key);
  Serial.println(intru);

  if(digitalRead(9)==HIGH) {
    nact();
    radio.startListening();
    radio.read(&dataf, sizeof(dataf));
    radio.stopListening();
    dnact();
  }

  if((F1>10) || (F2>10) || (F2>10) && (digitalRead(9)==LOW)) {
    digitalWrite(sensing, HIGH);

    sact();
    TIME();
    
    if(dataf==2) {
      send();
    }

    if(key>0) {
      opening();
    }
  }

  else if((F1<10) || (F2<10) || (F3<10)) {
    Serial.println("No movement");
  }

  delay(1000);
}

void nact() {
  digitalWrite(SDP, HIGH);
  digitalWrite(SCS, HIGH);
  delay(200);
  digitalWrite(NRP, LOW);
  digitalWrite(NCS, LOW);
}

void dnact() {
  digitalWrite(SDP, LOW);
  digitalWrite(SCS, LOW);
  delay(200);
  digitalWrite(NRP, HIGH);
  digitalWrite(NCS, HIGH);

}

void sact() {
  digitalWrite(NCS, HIGH);
  digitalWrite(NRP, HIGH);
  delay(200);
  digitalWrite(SCS, LOW);
  digitalWrite(SDP, LOW);
}

void TIME () {
  tmElements_t tm;
  if (RTC.read(tm)) {
    Serial.print("Time: ");
    Serial.print(tm.Second);

    myFile = SD.open("expe.csv", FILE_WRITE);

    if(myFile) {
      Serial.println("writing");
      myFile.print(tm.Second);
      myFile.print(",");
      myFile.print(tm.Minute);
      myFile.print(",");
      myFile.print(tm.Hour);
      myFile.print(",");
      myFile.print(tm.Day);
      myFile.print(",");
      myFile.print(F1);
      myFile.print(",");
      myFile.print(F2);
      myFile.print(",");
      myFile.print(F3);
      myFile.print(",");
      myFile.print(key);
      myFile.print(",");
      myFile.print(intru);
      myFile.print(",");

      Serial.println("done write");
      
      myFile.close();
    }
    else if(!myFile) {
      Serial.println("Error write RTC");
      while(1);
    }
  }
  
  else {
    if (!RTC.chipPresent()) {
      Serial.println("REALTIME P...");
      while(1);
    }
  }
}

void send() {
  nact();

  radio.stopListening();
  bool sent = radio.write(&key, sizeof(key));
  if(sent) {
  Serial.println("Sending");
  }

  else if(!sent) {
    Serial.println("can't send");
  }
}

void v12345() {
  //The probability will increase as the number of if statements in this method increases, current probability is 1/5

  if((F1>1000) || (F2>100) || (F3>300)) {
    key=1;
  }
  
  else if((F1>100) || (F2>1000) || (F3>500)) {
    key=2;
  }
  
  else if((F1>300) || (F2>300) || (F3>100)) {
    key=3;
  }
  
  else if((F1>200) || (F2>200) || (F3>1000)) {
    key=4;
  }
  
  else if((F1>400) || (F2>500) || (F3>200)) {
    key=5;
  }
}

void opening() {
  switch(key) { 
    case 1:
    if((F1>1000) && (F2>100) && (F3>300) && (dataf==2)) {
    digitalWrite(Close, LOW);
    digitalWrite(Open, HIGH);
    if(dataf!=2) {
        intru=1;
    }
    }
    break;

    case 2:
    if((F1>100) && (F2>1000) && (F3>500) && (dataf==2)) {
    digitalWrite(Close, LOW);
    digitalWrite(Open, HIGH);
    if(dataf!=2) {
        intru=2;
    }
    }
    break;

    case 3:
    if((F1>300) && (F2>300) && (F3>100) && (dataf==2)) {
    digitalWrite(Close, LOW);
    digitalWrite(Open, HIGH);
    if(dataf!=2) {
        intru=3;
    }
    }
    break;

    case 4:
    if((F1>200) && (F2>200) && (F3>1000) && (dataf==2)) {
    digitalWrite(Close, LOW);
    digitalWrite(Open, HIGH);
    if(dataf!=2) {
        intru=4;
    }
    }
    break;

    case 5:
    if((F1>400) && (F2>500) && (F3>200) && (dataf==2)) {
    digitalWrite(Close, LOW);
    digitalWrite(Open, HIGH);
    if(dataf!=2) {
        intru=5;
    }
    }
    break;

    default:
    digitalWrite(Close, HIGH);
    digitalWrite(Open, LOW);
    if(dataf!=2) {
        intru=9;
    }
    break;
  }
}
